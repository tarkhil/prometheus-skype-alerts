#!/usr/bin/python3
# Simple HTTP web server that forwards prometheus alerts over Skype.
#
# To use, configure a web hook in alertmanager. E.g.:
#
# receivers:
# - name: 'skype-pager'
#   webhook_configs:
#   - url: 'http://192.168.2.1:9478/alert'
#
# Edit skype-alerts.yml.example, then run:
# $ python3 prometheus-skype-alerts --config=skype-alerts.yml.example
import subprocess
import argparse
import json
import logging

import yaml
from aiohttp import web
from prometheus_client import (
    Counter,
    Gauge,
    generate_latest,
    CONTENT_TYPE_LATEST,
)

from prometheus_skype import (
    create_message_short,
    create_message_full,
    run_amtool,
)

from skpy import Skype, SkypeAuthException, SkypeEventLoop, SkypeNewMessageEvent


DEFAULT_CONF_PATH = '/etc/prometheus/skype-alerts.yml'
TEST_MSG = 'Test message from prometheus-skype-alerts'

alert_counter = Counter('alert_count', 'Total number of alerts delivered')
test_counter = Counter('test_count', 'Total number of test alerts delivered')
skype_message_counter = Counter(
    'skype_message_count', 'Total number of skype messages received.')
online_gauge = Gauge(
    'skype_online', 'Connected to Skype.')
last_alert_message_succeeded_gauge = Gauge(
    'last_alert_message_succeeded', 'Last alert message succeeded.')


def read_password_from_command(cmd):
    """
    Read the first line of the output of `cmd` and return the stripped string.
    Args:
        cmd: The command that should be executed.
    """
    out = subprocess.check_output(cmd, shell=True).decode('utf-8')
    lines = out.split('\n')
    first_line = lines[0]

    return first_line.strip()


class SkypeApp(SkypeEventLoop):

    def __init__(self, user, password_cb, 
                 amtool_allowed=None, alertmanager_url=None):

        SkypeEventLoop.__init__(self, user, password_cb, autoAck=True)
        self._amtool_allowed = amtool_allowed or []
        self.alertmanager_url = alertmanager_url
        self.auto_authorize = True
        for request in self.contacts.requests():
            request.accept()
        online_gauge.set(1)
        last_alert_message_succeeded_gauge.set(1)

    def onEvent(self, event):
        if self.alertmanager_url:
            logging.info(vars(event))
            if isinstance(event, SkypeNewMessageEvent):
                if event.msg.content.lower() in ('alert', 'silence'):
                    args = ['--alertmanager.url', self.alertmanager_url] + args
                    response = run_amtool(args)
                    event.msg.chat.sendMsg(response)

parser = argparse.ArgumentParser()
parser.add_argument('--config', dest='config_path',
                    type=str, default=DEFAULT_CONF_PATH,
                    help='Path to configuration file.')
parser.add_argument("-q", "--quiet", help="set logging to ERROR",
                    action="store_const", dest="loglevel",
                    const=logging.ERROR, default=logging.INFO)
parser.add_argument("-d", "--debug", help="set logging to DEBUG",
                    action="store_const", dest="loglevel",
                    const=logging.DEBUG, default=logging.INFO)

args = parser.parse_args()

# Setup logging.
logging.basicConfig(level=args.loglevel, format='%(levelname)-8s %(message)s')

with open(args.config_path) as f:
    if getattr(yaml, 'FullLoader', None):
        config = yaml.load(f, Loader=yaml.FullLoader)
    else:
        # Backwards compatibility with older versions of Python
        config = yaml.load(f)

skype_user = config['skype_user']

if config.get('password'):
    def password_cb():
        return config['password']
elif config.get('password_command'):
    def password_cb():
        return read_password_from_command(config['password_command'])
else:
    def password_cb():
        return None

skype_app = SkypeApp(
    skype_user, password_cb(),
    config.get('amtool_allowed', [config['to_user']]),
    config.get('alertmanager_url', None))

async def serve_test(request):
    to_user = request.match_info.get('to_user', config['to_user'])
    test_counter.inc()
    try:
        if '@thread.skype' in to_user:
            skype_app.chats[to_user].sendMsg(TEST_MSG)
        else:
            skype_app.contacts[to_user].chat.sendMsg(TEST_MSG)       
    except SkypeAuthException as e:
        logging.warning('Test alert not posted since we are not online: %s', e)
        return web.Response(
            body='Did not send message. Not online: %s' % e)
    else:
        return web.Response(body='Sent message.')

async def do_send(user,text):
    if '@thread.skype' in to_user:
        skype_app.chats[user].sendMsg(text)
    else:
        skype_app.contacts[user].chat.sendMsg(text)

async def serve_alert(request):
    to_user = request.match_info.get('to_user', config['to_user'])
    alert_counter.inc()
    try:
        alert = await request.json()
    except json.decoder.JSONDecodeError as e:
        raise web.HTTPUnprocessableEntity(text=str(e))
    try:
        if 'format' in config and config['format'] == 'full':
            text = '\n--\n'.join(create_message_full(alert))
        else:
            text = '\n'.join(create_message_short(alert))
        try:
            if type(to_user) == list:
                for user in to_user:
                    do_send(user, text)
            else:
                do_send(to_user, text)
        except SkypeAuthException as e:
            logging.warning('Alert posted but we are not online: %s', e)
            last_alert_message_succeeded_gauge.set(0)
            return web.Response(
                body='Did not send message. Not online: %s' % e)
        else:
            last_alert_message_succeeded_gauge.set(1)
            return web.Response(body='Sent message')
    except Exception:
        last_alert_message_succeeded_gauge.set(0)
        raise


async def serve_metrics(request):
    resp = web.Response(body=generate_latest())
    resp.content_type = CONTENT_TYPE_LATEST
    return resp


async def serve_health(request):
    if not skype_app.authenticated:
        return web.Response(status=500, text='not authenticated to server')
    return web.Response(body=b'ok')


async def serve_root(request):
    return web.Response(body='See /test, /health, /alert or /metrics')


web_app = web.Application()
web_app.add_routes([
    web.get('/', serve_root),
    web.get('/test', serve_test),
    web.get('/test/{to_user}', serve_test),
    web.post('/test', serve_test),
    web.post('/test/{to_user}', serve_test),
    web.get('/alert', serve_alert),
    web.get('/alert/{to_user}', serve_alert),
    web.post('/alert', serve_alert),
    web.post('/alert/{to_user}', serve_alert),
    web.get('/metrics', serve_metrics),
    web.get('/health', serve_health),
])

web.run_app(
    web_app, host=config['listen_address'], port=config['listen_port'])

skype_app.loop()
